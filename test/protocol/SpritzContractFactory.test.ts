/* eslint-disable @typescript-eslint/no-unused-vars */
import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { expect } from "chai";
import { ethers } from "hardhat";

import { SpritzContractFactory, SpritzContractFactory__factory } from "../../src/types";

const replaceLastChar = (str: string, newChar: string) => str.slice(0, -1) + newChar;

const validSalt = (signer: SignerWithAddress) => {
  const padding = "1".repeat(24);
  const salt = `${signer.address}${padding}`;
  return salt;
};

const EXAMPLE_BYTECODE =
  "0x608060405234801561001057600080fd5b5061145d806100206000396000f3fe60806040526004361061012d5760003560e01c80639010d07c116100a5578063aa2aedc411610074578063ca15c87311610059578063ca15c873146103a8578063d547741f146103c8578063d657c9bb146103e857600080fd5b8063aa2aedc414610366578063b8dc491b1461038857600080fd5b80639010d07c146102c057806391d14854146102e0578063a217fddf14610331578063a51254211461034657600080fd5b80632f2ff15d116100fc5780633b6e750f116100e15780633b6e750f146102605780633fcac5b2146102805780634a7dc8e0146102a057600080fd5b80632f2ff15d1461022057806336568abe1461024057600080fd5b806301ffc9a714610139578063248a9ca31461016e5780632983c4b8146101ac5780632b1eaf29146101ce57600080fd5b3661013457005b600080fd5b34801561014557600080fd5b50610159610154366004611175565b610408565b60405190151581526020015b60405180910390f35b34801561017a57600080fd5b5061019e6101893660046111b7565b60009081526020819052604090206001015490565b604051908152602001610165565b3480156101b857600080fd5b506101cc6101c73660046111f2565b610464565b005b3480156101da57600080fd5b506004546101fb9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610165565b34801561022c57600080fd5b506101cc61023b36600461120f565b61053c565b34801561024c57600080fd5b506101cc61025b36600461120f565b610567565b34801561026c57600080fd5b5061015961027b3660046111f2565b6105c5565b34801561028c57600080fd5b506101cc61029b36600461123f565b6105d2565b3480156102ac57600080fd5b506101cc6102bb3660046111f2565b6106cd565b3480156102cc57600080fd5b506101fb6102db3660046112a4565b61072a565b3480156102ec57600080fd5b506101596102fb36600461120f565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561033d57600080fd5b5061019e600081565b34801561035257600080fd5b506101cc6103613660046111f2565b610749565b34801561037257600080fd5b5061037b6107a6565b60405161016591906112c6565b34801561039457600080fd5b506101cc6103a3366004611320565b6107b7565b3480156103b457600080fd5b5061019e6103c33660046111b7565b610874565b3480156103d457600080fd5b506101cc6103e336600461120f565b61088b565b3480156103f457600080fd5b506101cc6104033660046111f2565b6108b0565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f00000000000000000000000000000000000000000000000000000000148061045e575061045e82610955565b92915050565b600061046f816109ec565b73ffffffffffffffffffffffffffffffffffffffff82166104bc576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155604080519182523360208301527ff2aee2de2705c86bdfda6c3ddaddc83ce3b729f850c62f38aa6c9fc93158a5d491015b60405180910390a15050565b600082815260208190526040902060010154610557816109ec565b61056183836109f9565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811633146105b6576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105c08282610a2e565b505050565b600061045e600283610a5b565b846105de600282610a5b565b610631576040517ff0bf61ce00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b6004546106589073ffffffffffffffffffffffffffffffffffffffff888116911687610a8a565b6004546040805173ffffffffffffffffffffffffffffffffffffffff92831681526020810186905288831681830152606081018890529051849287811692908b16917f2415a5b602fd0082bd30dae862c30bbf8abbfcf39db48726b2d8ef555ee1abde9181900360800190a450505050505050565b60006106d8816109ec565b6106e3600283610b17565b5060405173ffffffffffffffffffffffffffffffffffffffff831681527fa317c10673baf4f03b3c1041bd5ddbb537d0333a86fec3607c75f9dbb630f48f90602001610530565b60008281526001602052604081206107429083610b39565b9392505050565b6000610754816109ec565b61075f600283610b45565b5060405173ffffffffffffffffffffffffffffffffffffffff831681527f85a3e72f8dd6db3794f93109c3c5f5b79d6112f6979431c45f98b26134b42af290602001610530565b60606107b26002610b67565b905090565b60006107c2816109ec565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526105c090839073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015610832573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610856919061134e565b73ffffffffffffffffffffffffffffffffffffffff86169190610a8a565b600081815260016020526040812061045e90610b74565b6000828152602081905260409020600101546108a6816109ec565b6105618383610a2e565b60006108bb816109ec565b60008273ffffffffffffffffffffffffffffffffffffffff164760405160006040518083038185875af1925050503d8060008114610915576040519150601f19603f3d011682016040523d82523d6000602084013e61091a565b606091505b50509050806105c0576040517f7aa60a9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061045e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461045e565b6109f68133610b7e565b50565b600080610a068484610c08565b90508015610742576000848152600160205260409020610a269084610b17565b509392505050565b600080610a3b8484610d04565b90508015610742576000848152600160205260409020610a269084610b45565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001830160205260408120541515610742565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105c0908490610dbf565b60006107428373ffffffffffffffffffffffffffffffffffffffff8416610e55565b60006107428383610e9c565b60006107428373ffffffffffffffffffffffffffffffffffffffff8416610ec6565b6060600061074283610fb9565b600061045e825490565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610c04576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610628565b5050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16610cfc5760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610c9a3390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161045e565b50600061045e565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff1615610cfc5760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161045e565b6000610de173ffffffffffffffffffffffffffffffffffffffff841683611015565b90508051600014158015610e06575080806020019051810190610e049190611367565b155b156105c0576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610628565b6000818152600183016020526040812054610cfc5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561045e565b6000826000018281548110610eb357610eb3611389565b9060005260206000200154905092915050565b60008181526001830160205260408120548015610faf576000610eea6001836113b8565b8554909150600090610efe906001906113b8565b9050808214610f63576000866000018281548110610f1e57610f1e611389565b9060005260206000200154905080876000018481548110610f4157610f41611389565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610f7457610f746113f2565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061045e565b600091505061045e565b60608160000180548060200260200160405190810160405280929190818152602001828054801561100957602002820191906000526020600020905b815481526020019060010190808311610ff5575b50505050509050919050565b606061074283836000846000808573ffffffffffffffffffffffffffffffffffffffff1684866040516110489190611421565b60006040518083038185875af1925050503d8060008114611085576040519150601f19603f3d011682016040523d82523d6000602084013e61108a565b606091505b509150915061109a8683836110a4565b9695505050505050565b6060826110b9576110b482611133565b610742565b81511580156110dd575073ffffffffffffffffffffffffffffffffffffffff84163b155b1561112c576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610628565b5080610742565b8051156111435780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561118757600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461074257600080fd5b6000602082840312156111c957600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146109f657600080fd5b60006020828403121561120457600080fd5b8135610742816111d0565b6000806040838503121561122257600080fd5b823591506020830135611234816111d0565b809150509250929050565b60008060008060008060c0878903121561125857600080fd5b8635611263816111d0565b95506020870135611273816111d0565b945060408701359350606087013561128a816111d0565b9598949750929560808101359460a0909101359350915050565b600080604083850312156112b757600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561131457835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016112e2565b50909695505050505050565b6000806040838503121561133357600080fd5b823561133e816111d0565b91506020830135611234816111d0565b60006020828403121561136057600080fd5b5051919050565b60006020828403121561137957600080fd5b8151801515811461074257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8181038181111561045e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000825160005b818110156114425760208186018101518583015201611428565b50600092019182525091905056fea164736f6c6343000815000a";

const setupFactoryFixture = async () => {
  const [controller, deployer] = await ethers.getSigners();

  const ReceiverFactory = (await ethers.getContractFactory("SpritzContractFactory")) as SpritzContractFactory__factory;
  const factory = (await ReceiverFactory.connect(deployer).deploy()) as SpritzContractFactory;
  await factory.deployed();

  return {
    controller,
    deployer,
    factory,
  };
};

describe.only("SpritzContractFactory", function () {
  let controller: SignerWithAddress;
  let deployer: SignerWithAddress;
  let factory: SpritzContractFactory;

  beforeEach(async () => {
    ({ controller, deployer, factory } = await loadFixture(setupFactoryFixture));
  });

  it("prevents deployments if the salt does not contain the caller address", async function () {
    const salt = validSalt(controller);

    await expect(factory.connect(deployer).deploy(salt, EXAMPLE_BYTECODE)).to.be.revertedWithCustomError(
      factory,
      "InvalidSalt",
    );
  });

  it("successfully deploys if the salt contains the caller address", async function () {
    const salt = validSalt(deployer);

    await expect(factory.connect(deployer).deploy(salt, EXAMPLE_BYTECODE)).not.to.be.revertedWithCustomError(
      factory,
      "InvalidSalt",
    );
  });

  it("computes the correct deployment address", async function () {
    const salt = validSalt(deployer);

    const expectedAddress = await factory.computeAddress(salt, EXAMPLE_BYTECODE);

    const byteCode = await deployer.provider?.getCode(expectedAddress);
    expect(byteCode).to.equal("0x");

    const txReceipt = await factory.connect(deployer).deploy(salt, EXAMPLE_BYTECODE);
    await txReceipt.wait();

    const byteCodeAfter = await deployer.provider?.getCode(expectedAddress);
    expect(byteCodeAfter).to.have.length.greaterThan(2);
  });

  it("computes a different address if the salt changes at all", async function () {
    const salt = validSalt(deployer);
    const salt2 = replaceLastChar(salt, "3");

    const expectedAddress = await factory.computeAddress(salt, EXAMPLE_BYTECODE);
    const expectedAddress2 = await factory.computeAddress(salt2, EXAMPLE_BYTECODE);

    expect(expectedAddress).not.to.eq(expectedAddress2);
  });

  it("reverts if no bytecode is provided", async function () {
    const salt = validSalt(deployer);

    await expect(factory.connect(deployer).deploy(salt, "0x")).to.be.revertedWithCustomError(
      factory,
      "Create2EmptyBytecode",
    );
  });

  it("reverts if contract is already deployed", async function () {
    const salt = validSalt(deployer);

    const txReceipt = await factory.connect(deployer).deploy(salt, EXAMPLE_BYTECODE);
    await txReceipt.wait();

    await expect(factory.connect(deployer).deploy(salt, EXAMPLE_BYTECODE)).to.be.revertedWithCustomError(
      factory,
      "Create2FailedDeployment",
    );
  });
});
